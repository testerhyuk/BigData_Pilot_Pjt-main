# 1. 스마트카 정보를 수집하기 위한 Flume 설정
# 1) 플럼의 에이전트에서 사용할 Source, Channel, Sink의 각 리소스 변수 정의 
# SmartCarInfo : 스마트카 상태 정보, DriverCarInfo : 운전자 운행 정보(운전자 운행 정보는 2. 에서 다룰 예정)
SmartCar_Agent.sources  = SmartCarInfo_SpoolSource DriverCarInfo_TailSource
SmartCar_Agent.channels = SmartCarInfo_Channel DriverCarInfo_Channel
SmartCar_Agent.sinks    = SmartCarInfo_LoggerSink DriverCarInfo_KafkaSink

# 2) 에이전트 Source 설정. 1)에서 Source로 선언한 SmartCarInfo_SpoolSource라는 변수에 Type을 "spooldir"로 설정
# "spooldir"는 지정한 특정 디렉토리를 모니터링하고 있다가 새로운 파일이 생성되면 이벤트를 감지해서 "batchsize"만큼 읽어서 3)의 Channel 전송 
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.type = spooldir
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.spoolDir = /home/pilot-pjt/working/car-batch-log
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.deletePolicy = immediate
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.batchSize = 1000

# Interceptor : Source와 Channel의 중간에서, 유입되는 데이터 중 일부 데이터를 수정하거나 필요한 데이터만 필터링 하기위한 가공/정제 기능을 함
# 수집 데이터 필터링을 위해 filterInterceptor 변수를 선언해서 SmartCarInfo_SpoolSource에 할당
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors = filterInterceptor

# filterInterceptor Type을 "regex_filter"로 설정
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.type = regex_filter
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.regex = ^\\d{14}
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.excludeEvents = false


# 3) 에이전트의 Channel 설정. SmartCar의 type을 "Memory"로 설정
# 채널의 종류는 Memory와 File로 나뉨
# Memory Channel : Source로부터 받은 데이터를 메모리상에 중간 적재하므로 성능이 높지만 안정성이 낮음
# File Channel : Source로부터 받은 데이터를 로컬 파일시스템 경로인 "dataDirs"에 임시 저장했다가 Sink에게 데이터 제공. 성능은 낮으나 안정성이 높음
SmartCar_Agent.channels.SmartCarInfo_Channel.type = memory
SmartCar_Agent.channels.SmartCarInfo_Channel.capacity  = 100000
SmartCar_Agent.channels.SmartCarInfo_Channel.transactionCapacity  = 10000

# 4) 에이전트의 최종 목적지. SmartCarInfo_LoggerSink의 Type을 "logger"로 설정. 
# Logger Sink는 수집한 데이터를 테스트 및 디버깅 목적으로 플럼의 표준 출력 로그 파일인 /var/log/flume-ng/flume-cmf-flume-AGENT-server02.hadoop.com.log에 출력
SmartCar_Agent.sinks.SmartCarInfo_LoggerSink.type = logger

# 5) Source와 Channel Sink를 연결. 
# 앞서 정의한 SmartCarInfo_SpoolSource의 채널값을 SmartCarInfo_Channel로 설정하고, SmartCarInfo_LoggerSink의 채널값도 SmartCarInfo_Channel로 설정
# 이로써 File -> Channel -> Sink로 이어지는 에이전트 리소스를 하나로 연결
SmartCar_Agent.sources.SmartCarInfo_SpoolSource.channels = SmartCarInfo_Channel
SmartCar_Agent.sinks.SmartCarInfo_LoggerSink.channel = SmartCarInfo_Channel


# 2. 운전자 운행 정보를 수집하여 Kafka에 보내기 위한 설정
# 1) Source의 type을 "exec"로 설정. "exec"는 플럼 외부에서 수행한 명령의 결과를 플럼의 Event로 가져와 수집할 수 있는 기능 제공
# 스마트카 운전자의 운행 정보는 "/home/pilot-pjt/working/driver-realtime-log/SmartCarDriverInfo.log"에 담기며, 리눅스 "tail" 명령을 플럼의 "exec"를 실행하여 운전자의 운행정보를 실시간 수집
SmartCar_Agent.sources.DriverCarInfo_TailSource.type = exec
SmartCar_Agent.sources.DriverCarInfo_TailSource.command = tail -F /home/pilot-pjt/working/driver-realtime-log/SmartCarDriverInfo.log
SmartCar_Agent.sources.DriverCarInfo_TailSource.restart = true
SmartCar_Agent.sources.DriverCarInfo_TailSource.batchSize = 1000

SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors = filterInterceptor2

# 2) Interceptor 추가
SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.type = regex_filter
SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.regex = ^\\d{14}
SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.excludeEvents = false

# 3) 운전자의 실시간 운행 정보는 플럼에서 수집과 동시에 Kafka로 전송
# KafkaSink의 내용을 보면 카프카 브로커가 실행중인 server02.hadoop.com:9092에 연결해서 SmartCar-Topic에 데이터를 1000개의 batchsize로 전송
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.type = org.apache.flume.sink.kafka.KafkaSink
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.topic = SmartCar-Topic
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.brokerList = server02.hadoop.com:9092
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.requiredAcks = 1
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.batchSize = 1000

# 4) DriverCarInfo의 Channel을 Memory Channel로 선언
SmartCar_Agent.channels.DriverCarInfo_Channel.type = memory
SmartCar_Agent.channels.DriverCarInfo_Channel.capacity= 100000
SmartCar_Agent.channels.DriverCarInfo_Channel.transactionCapacity = 10000

# 5) DriverCarInfo의 Source와 Sink의 Channel을 앞서 정의한 DriverCarInfo_Channel로 설정해서 Source -> Channel -> Sink의 구조 완성
SmartCar_Agent.sources.DriverCarInfo_TailSource.channels = DriverCarInfo_Channel
SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.channel = DriverCarInfo_Channel

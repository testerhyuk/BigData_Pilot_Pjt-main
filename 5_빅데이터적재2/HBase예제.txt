(Server02에 가서 root계정으로 접속)
$ hbase shell
$ hbase(main):001:0> create 'smartcar_test_table', 'cf'
$ hbase(main):002:0> put 'smartcar_test_table', 'row-key1', 'cf:model', 'Z0001'
$ hbase(main):003:0> put 'smartcar_test_table', 'row-key1', 'cf:no', 'Z0001'
$ hbase(main):004:0> get 'smartcar_test_table', 'row-key1'

# Test 테이블 삭제
$ disable 'smartcar_test_table'
$ drop 'smartcar_test_table'
$ exit

# HBase는 자원소모가 크므로, 저사양환경에서는 미사용시 중지시킨다

1. HBase 테이블 생성
$ hbase org.apache.hadoop.hbase.util.RegionSplitter DriverCarInfo HexStringSplit -c 2 -f cf1 # 저사양에서는 리전 스필릿 개수를 2로 한다. "-c 2"

2. 스톰 Topology 배포
$ cd /home/pilot-pjt/working
$ storm jar bigdata.smartcar.storm-1.0.jar com.wikibook.bigdata.smartcar.storm.SmartCarDriverTopology DriverCarInfo

3. 로그 시뮬레이터 작동
$ cd /home/pilot-pjt/working
$ java -cp bigdata.smartcar.loggen-1.0.jar com.wikibook.bigdata.smartcar.loggen.DriverLogMain 20160103 10 &

4. HBase 작동
$ hbase shell
$ hbase(main):001:0> count 'DriverCarInfo' # 데이터 로우수를 1000단위로 출력
$ hbase(main):001:0> scan 'DriverCarInfo', {LIMIT=>20} # 해당 테이블에 적재된 칼럼 기반 구조의 데이터 확인
00001030106102-Y0006                        column=cf1:area_number, timestamp=1614588048860, value=D04
00001030106102-Y0006                        column=cf1:break_pedal, timestamp=1614588048860, value=0
00001030106102-Y0006                        column=cf1:car_number, timestamp=1614588048860, value=Y0006
00001030106102-Y0006                        column=cf1:date, timestamp=1614588048860, value=20160103010000
00001030106102-Y0006                        column=cf1:direct_light, timestamp=1614588048860, value=N
00001030106102-Y0006                        column=cf1:speed, timestamp=1614588048860, value=200
00001030106102-Y0006                        column=cf1:speed_pedal, timestamp=1614588048860, value=4
00001030106102-Y0006                        column=cf1:steer_angle, timestamp=1614588048860, value=L1

$ hbase(main):001:0> scan 'DriverCarInfo', {STARTROW=>'00001030106102-Y0006',LIMIT=>1} # 현재의 ROW키 이상의 데이터들을 조회
00001030106102-Y0006                        column=cf1:area_number, timestamp=1614588048860, value=D04
00001030106102-Y0006                        column=cf1:break_pedal, timestamp=1614588048860, value=0
00001030106102-Y0006                        column=cf1:car_number, timestamp=1614588048860, value=Y0006
00001030106102-Y0006                        column=cf1:date, timestamp=1614588048860, value=20160103010000
00001030106102-Y0006                        column=cf1:direct_light, timestamp=1614588048860, value=N
00001030106102-Y0006                        column=cf1:speed, timestamp=1614588048860, value=200
00001030106102-Y0006                        column=cf1:speed_pedal, timestamp=1614588048860, value=4
00001030106102-Y0006                        column=cf1:steer_angle, timestamp=1614588048860, value=L1

area_number : 운행 지역
break_pedal : 브레이크 밟음 유무
car_number : 스마트카 차량번호
date : 운행했던 날의 날짜
direct_light : 방향전조등 ON/OFF 유무
speed : 시속 x km/h
speed_pedal : 가속 페달을 n단계 진행
steer_angle : 핸들 방향

$ hbase(main):001:0> scan 'DriverCarInfo', {COLUMNS=>['cf1:car_number','cf1:area_number'], FILTER=>"RowFilter(=,'regexstring:30106102') AND SingleColumnValueFilter('cf1', 'area_number',=,'regexstring:D04')"}

5. 레디스 확인
$ cd /home/pilot-pjt/working
$ java -cp bigdata.smartcar.redis-1.0.jar com.wikibook.bigdata.smartcar.redis.OverSpeedCarInfo 20160103
$ redis-cli
$ 127.0.0.1:6379> smembers 20160103 # 차량중에서 30초 윈도우 타임동안 평균 80km/h 이상을 초과(과속)한 차량들 만을 골라낸다


6. 시뮬레이터 종료
$ ps -ef | grep smartcar.log
$ kill -9 [pid] [pid]
